How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Very nicely concerning the lines (vertical search), but within the line we have the same problem as before (horizontal search). In this case it would be improtatn to control the line length.
    

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Find bugs, compare past/new performances,...

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros:
	- you can choose the logical point at which the commit makes sense and it would rather related with a message.
	- you do not have so mny commits related to the same feature (e.g. writting corrections like do,undo,..)
    Cons:
	- you have to be responsible of doing periodical and logical commits.
	

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git relates to projects with multiple files.

How can you use the commands git log and git diff to view the history of files?

    git log shows you the history of changes
    git diff shows you the changes in a specific time of the history.

How might using version control make you more confident to make changes that
could break something?

    I can go back to a working version at anytime and check which broke the code. 

Now that you have your workspace set up, what do you want to try using Git for?

    Making more examples and exercises before going to my own project.
